[{"name":"String","module":"java.base","package":"java.lang","fields":[{"name":"CASE_INSENSITIVE_ORDER","modifiers":["static","final"],"type":"Comparator<String>","description":"A Comparator that orders String objects as by compareToIgnoreCase."}],"methods":[{"name":"chars","modifiers":[],"type":"IntStream","description":"Returns a stream of int zero-extending the char values from this sequence.","args":[]},{"name":"codePointAt","modifiers":[],"type":"int","description":"Returns the character (Unicode code point) at the specified index.","args":[{"type":"int","name":"index"}]},{"name":"codePointBefore","modifiers":[],"type":"int","description":"Returns the character (Unicode code point) before the specified index.","args":[{"type":"int","name":"index"}]},{"name":"codePointCount","modifiers":[],"type":"int","description":"Returns the number of Unicode code points in the specified text range of this String.","args":[{"type":"int","name":"beginIndex"},{"type":"int","name":"endIndex"}]},{"name":"codePoints","modifiers":[],"type":"IntStream","description":"Returns a stream of code point values from this sequence.","args":[]},{"name":"compareTo","modifiers":[],"type":"int","description":"Compares two strings lexicographically.","args":[{"type":"String","name":"anotherString"}]},{"name":"compareToIgnoreCase","modifiers":[],"type":"int","description":"Compares two strings lexicographically, ignoring case differences.","args":[{"type":"String","name":"str"}]},{"name":"concat","modifiers":[],"type":"String","description":"Concatenates the specified string to the end of this string.","args":[{"type":"String","name":"str"}]},{"name":"contains","modifiers":[],"type":"boolean","description":"Returns true if and only if this string contains the specified sequence of char values.","args":[{"type":"CharSequence","name":"s"}]},{"name":"contentEquals","modifiers":[],"type":"boolean","description":"Compares this string to the specified CharSequence.","args":[{"type":"CharSequence","name":"cs"}]},{"name":"contentEquals","modifiers":[],"type":"boolean","description":"Compares this string to the specified StringBuffer.","args":[{"type":"StringBuffer","name":"sb"}]},{"name":"copyValueOf","modifiers":["static"],"type":"String","description":"Equivalent to valueOf(char[]).","args":[{"type":"char[]","name":"data"}]},{"name":"copyValueOf","modifiers":["static"],"type":"String","description":"Equivalent to valueOf(char[], int, int).","args":[{"type":"char[]","name":"data"},{"type":"int","name":"offset"},{"type":"int","name":"count"}]},{"name":"describeConstable","modifiers":[],"type":"Optional<String>","description":"Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.","args":[]},{"name":"endsWith","modifiers":[],"type":"boolean","description":"Tests if this string ends with the specified suffix.","args":[{"type":"String","name":"suffix"}]},{"name":"equals","modifiers":[],"type":"boolean","description":"Compares this string to the specified object.","args":[{"type":"Object","name":"anObject"}]},{"name":"equalsIgnoreCase","modifiers":[],"type":"boolean","description":"Compares this String to another String, ignoring case considerations.","args":[{"type":"String","name":"anotherString"}]},{"name":"format","modifiers":["static"],"type":"String","description":"Returns a formatted string using the specified format string and arguments.","args":[{"type":"String","name":"format"},{"type":"Object...","name":"args"}]},{"name":"format","modifiers":["static"],"type":"String","description":"Returns a formatted string using the specified locale, format string, and arguments.","args":[{"type":"Locale","name":"l"},{"type":"String","name":"format"},{"type":"Object...","name":"args"}]},{"name":"formatted","modifiers":[],"type":"String","description":"Formats using this string as the format string, and the supplied arguments.","args":[{"type":"Object...","name":"args"}]},{"name":"getBytes","modifiers":[],"type":"byte[]","description":"Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array.","args":[]},{"name":"getBytes","modifiers":[],"type":"void","description":"Deprecated.This method does not properly convert characters into bytes.","args":[{"type":"int","name":"srcBegin"},{"type":"int","name":"srcEnd"},{"type":"byte[]","name":"dst"},{"type":"int","name":"dstBegin"}]},{"name":"getBytes","modifiers":[],"type":"byte[]","description":"Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array.","args":[{"type":"String","name":"charsetName"}]},{"name":"getBytes","modifiers":[],"type":"byte[]","description":"Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array.","args":[{"type":"Charset","name":"charset"}]},{"name":"getChars","modifiers":[],"type":"void","description":"Copies characters from this string into the destination character array.","args":[{"type":"int","name":"srcBegin"},{"type":"int","name":"srcEnd"},{"type":"char[]","name":"dst"},{"type":"int","name":"dstBegin"}]},{"name":"hashCode","modifiers":[],"type":"int","description":"Returns a hash code for this string.","args":[]},{"name":"indent","modifiers":[],"type":"String","description":"Adjusts the indentation of each line of this string based on the value of n, and normalizes line termination characters.","args":[{"type":"int","name":"n"}]},{"name":"indexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the first occurrence of the specified character.","args":[{"type":"int","name":"ch"}]},{"name":"indexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.","args":[{"type":"int","name":"ch"},{"type":"int","name":"fromIndex"}]},{"name":"indexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the first occurrence of the specified substring.","args":[{"type":"String","name":"str"}]},{"name":"indexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.","args":[{"type":"String","name":"str"},{"type":"int","name":"fromIndex"}]},{"name":"intern","modifiers":[],"type":"String","description":"Returns a canonical representation for the string object.","args":[]},{"name":"isBlank","modifiers":[],"type":"boolean","description":"Returns true if the string is empty or contains only white space codepoints, otherwise false.","args":[]},{"name":"isEmpty","modifiers":[],"type":"boolean","description":"Returns true if, and only if, length() is 0.","args":[]},{"name":"join","modifiers":["static"],"type":"String","description":"Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.","args":[{"type":"CharSequence","name":"delimiter"},{"type":"CharSequence...","name":"elements"}]},{"name":"join","modifiers":["static"],"type":"String","description":"Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.","args":[{"type":"CharSequence","name":"delimiter"},{"type":"Iterable<?","name":"extends"}]},{"name":"lastIndexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the last occurrence of the specified character.","args":[{"type":"int","name":"ch"}]},{"name":"lastIndexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.","args":[{"type":"int","name":"ch"},{"type":"int","name":"fromIndex"}]},{"name":"lastIndexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the last occurrence of the specified substring.","args":[{"type":"String","name":"str"}]},{"name":"lastIndexOf","modifiers":[],"type":"int","description":"Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index.","args":[{"type":"String","name":"str"},{"type":"int","name":"fromIndex"}]},{"name":"length","modifiers":[],"type":"int","description":"Returns the length of this string.","args":[]},{"name":"lines","modifiers":[],"type":"Stream<String>","description":"Returns a stream of lines extracted from this string, separated by line terminators.","args":[]},{"name":"matches","modifiers":[],"type":"boolean","description":"Tells whether or not this string matches the given regular expression.","args":[{"type":"String","name":"regex"}]},{"name":"offsetByCodePoints","modifiers":[],"type":"int","description":"Returns the index within this String that is offset from the given index by codePointOffset code points.","args":[{"type":"int","name":"index"},{"type":"int","name":"codePointOffset"}]},{"name":"regionMatches","modifiers":[],"type":"boolean","description":"Tests if two string regions are equal.","args":[{"type":"boolean","name":"ignoreCase"},{"type":"int","name":"toffset"},{"type":"String","name":"other"},{"type":"int","name":"ooffset"},{"type":"int","name":"len"}]},{"name":"regionMatches","modifiers":[],"type":"boolean","description":"Tests if two string regions are equal.","args":[{"type":"int","name":"toffset"},{"type":"String","name":"other"},{"type":"int","name":"ooffset"},{"type":"int","name":"len"}]},{"name":"repeat","modifiers":[],"type":"String","description":"Returns a string whose value is the concatenation of this string repeated count times.","args":[{"type":"int","name":"count"}]},{"name":"replace","modifiers":[],"type":"String","description":"Returns a string resulting from replacing all occurrences of oldChar in this string with newChar.","args":[{"type":"char","name":"oldChar"},{"type":"char","name":"newChar"}]},{"name":"replace","modifiers":[],"type":"String","description":"Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.","args":[{"type":"CharSequence","name":"target"},{"type":"CharSequence","name":"replacement"}]},{"name":"replaceAll","modifiers":[],"type":"String","description":"Replaces each substring of this string that matches the given regular expression with the given replacement.","args":[{"type":"String","name":"regex"},{"type":"String","name":"replacement"}]},{"name":"replaceFirst","modifiers":[],"type":"String","description":"Replaces the first substring of this string that matches the given regular expression with the given replacement.","args":[{"type":"String","name":"regex"},{"type":"String","name":"replacement"}]},{"name":"resolveConstantDesc","modifiers":[],"type":"String","description":"Resolves this instance as a ConstantDesc, the result of which is the instance itself.","args":[{"type":"MethodHandles.Lookup","name":"lookup"}]},{"name":"split","modifiers":[],"type":"String[]","description":"Splits this string around matches of the given regular expression.","args":[{"type":"String","name":"regex"}]},{"name":"split","modifiers":[],"type":"String[]","description":"Splits this string around matches of the given regular expression.","args":[{"type":"String","name":"regex"},{"type":"int","name":"limit"}]},{"name":"startsWith","modifiers":[],"type":"boolean","description":"Tests if this string starts with the specified prefix.","args":[{"type":"String","name":"prefix"}]},{"name":"startsWith","modifiers":[],"type":"boolean","description":"Tests if the substring of this string beginning at the specified index starts with the specified prefix.","args":[{"type":"String","name":"prefix"},{"type":"int","name":"toffset"}]},{"name":"strip","modifiers":[],"type":"String","description":"Returns a string whose value is this string, with all leading and trailing white space removed.","args":[]},{"name":"stripIndent","modifiers":[],"type":"String","description":"Returns a string whose value is this string, with incidental white space removed from the beginning and end of every line.","args":[]},{"name":"stripLeading","modifiers":[],"type":"String","description":"Returns a string whose value is this string, with all leading white space removed.","args":[]},{"name":"stripTrailing","modifiers":[],"type":"String","description":"Returns a string whose value is this string, with all trailing white space removed.","args":[]},{"name":"subSequence","modifiers":[],"type":"CharSequence","description":"Returns a character sequence that is a subsequence of this sequence.","args":[{"type":"int","name":"beginIndex"},{"type":"int","name":"endIndex"}]},{"name":"substring","modifiers":[],"type":"String","description":"Returns a string that is a substring of this string.","args":[{"type":"int","name":"beginIndex"}]},{"name":"substring","modifiers":[],"type":"String","description":"Returns a string that is a substring of this string.","args":[{"type":"int","name":"beginIndex"},{"type":"int","name":"endIndex"}]},{"name":"toCharArray","modifiers":[],"type":"char[]","description":"Converts this string to a new character array.","args":[]},{"name":"toLowerCase","modifiers":[],"type":"String","description":"Converts all of the characters in this String to lower case using the rules of the default locale.","args":[]},{"name":"toLowerCase","modifiers":[],"type":"String","description":"Converts all of the characters in this String to lower case using the rules of the given Locale.","args":[{"type":"Locale","name":"locale"}]},{"name":"toString","modifiers":[],"type":"String","description":"This object (which is already a string!)","args":[]},{"name":"toUpperCase","modifiers":[],"type":"String","description":"Converts all of the characters in this String to upper case using the rules of the default locale.","args":[]},{"name":"toUpperCase","modifiers":[],"type":"String","description":"Converts all of the characters in this String to upper case using the rules of the given Locale.","args":[{"type":"Locale","name":"locale"}]},{"name":"transform","modifiers":["<R>"],"type":"R","description":"This method allows the application of a function to this string.","args":[{"type":"Function<?","name":"super"},{"type":"?","name":"extends"}]},{"name":"translateEscapes","modifiers":[],"type":"String","description":"Returns a string whose value is this string, with escape sequences translated as if in a string literal.","args":[]},{"name":"trim","modifiers":[],"type":"String","description":"Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character).","args":[]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the boolean argument.","args":[{"type":"boolean","name":"b"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the char argument.","args":[{"type":"char","name":"c"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the char array argument.","args":[{"type":"char[]","name":"data"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of a specific subarray of the char array argument.","args":[{"type":"char[]","name":"data"},{"type":"int","name":"offset"},{"type":"int","name":"count"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the double argument.","args":[{"type":"double","name":"d"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the float argument.","args":[{"type":"float","name":"f"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the int argument.","args":[{"type":"int","name":"i"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the long argument.","args":[{"type":"long","name":"l"}]},{"name":"valueOf","modifiers":["static"],"type":"String","description":"Returns the string representation of the Object argument.","args":[{"type":"Object","name":"obj"}]}],"constructors":[{"name":"String","description":"Initializes a newly created String object so that it represents an empty character sequence.","args":[]},{"name":"String","description":"Constructs a new String by decoding the specified array of bytes using the platform's default charset.","args":[{"type":"byte[]","name":"bytes"}]},{"name":"String","description":"Deprecated.This method does not properly convert bytes into characters.","args":[{"type":"byte[]","name":"ascii"},{"type":"int","name":"hibyte"}]},{"name":"String","description":"Constructs a new String by decoding the specified subarray of bytes using the platform's default charset.","args":[{"type":"byte[]","name":"bytes"},{"type":"int","name":"offset"},{"type":"int","name":"length"}]},{"name":"String","description":"Deprecated.This method does not properly convert bytes into characters.","args":[{"type":"byte[]","name":"ascii"},{"type":"int","name":"hibyte"},{"type":"int","name":"offset"},{"type":"int","name":"count"}]},{"name":"String","description":"Constructs a new String by decoding the specified subarray of bytes using the specified charset.","args":[{"type":"byte[]","name":"bytes"},{"type":"int","name":"offset"},{"type":"int","name":"length"},{"type":"String","name":"charsetName"}]},{"name":"String","description":"Constructs a new String by decoding the specified subarray of bytes using the specified charset.","args":[{"type":"byte[]","name":"bytes"},{"type":"int","name":"offset"},{"type":"int","name":"length"},{"type":"Charset","name":"charset"}]},{"name":"String","description":"Constructs a new String by decoding the specified array of bytes using the specified charset.","args":[{"type":"byte[]","name":"bytes"},{"type":"String","name":"charsetName"}]},{"name":"String","description":"Constructs a new String by decoding the specified array of bytes using the specified charset.","args":[{"type":"byte[]","name":"bytes"},{"type":"Charset","name":"charset"}]},{"name":"String","description":"Allocates a new String so that it represents the sequence of characters currently contained in the character array argument.","args":[{"type":"char[]","name":"value"}]},{"name":"String","description":"Allocates a new String that contains characters from a subarray of the character array argument.","args":[{"type":"char[]","name":"value"},{"type":"int","name":"offset"},{"type":"int","name":"count"}]},{"name":"String","description":"Allocates a new String that contains characters from a subarray of the Unicode code point array argument.","args":[{"type":"int[]","name":"codePoints"},{"type":"int","name":"offset"},{"type":"int","name":"count"}]},{"name":"String","description":"Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string.","args":[{"type":"String","name":"original"}]},{"name":"String","description":"Allocates a new string that contains the sequence of characters currently contained in the string buffer argument.","args":[{"type":"StringBuffer","name":"buffer"}]},{"name":"String","description":"Allocates a new string that contains the sequence of characters currently contained in the string builder argument.","args":[{"type":"StringBuilder","name":"builder"}]}]}]