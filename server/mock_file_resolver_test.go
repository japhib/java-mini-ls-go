// Code generated by MockGen. DO NOT EDIT.
// Source: ../file_resolver.go

// Package mock_server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileResolver is a mock of FileResolver interface.
type MockFileResolver struct {
	ctrl     *gomock.Controller
	recorder *MockFileResolverMockRecorder
}

// MockFileResolverMockRecorder is the mock recorder for MockFileResolver.
type MockFileResolverMockRecorder struct {
	mock *MockFileResolver
}

// NewMockFileResolver creates a new mock instance.
func NewMockFileResolver(ctrl *gomock.Controller) *MockFileResolver {
	mock := &MockFileResolver{ctrl: ctrl}
	mock.recorder = &MockFileResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileResolver) EXPECT() *MockFileResolverMockRecorder {
	return m.recorder
}

// FileURIToPath mocks base method.
func (m *MockFileResolver) FileURIToPath(uri string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileURIToPath", uri)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileURIToPath indicates an expected call of FileURIToPath.
func (mr *MockFileResolverMockRecorder) FileURIToPath(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileURIToPath", reflect.TypeOf((*MockFileResolver)(nil).FileURIToPath), uri)
}

// ListJavaFilesRecursive mocks base method.
func (m *MockFileResolver) ListJavaFilesRecursive(folderPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJavaFilesRecursive", folderPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJavaFilesRecursive indicates an expected call of ListJavaFilesRecursive.
func (mr *MockFileResolverMockRecorder) ListJavaFilesRecursive(folderPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJavaFilesRecursive", reflect.TypeOf((*MockFileResolver)(nil).ListJavaFilesRecursive), folderPath)
}

// ReadFile mocks base method.
func (m *MockFileResolver) ReadFile(filePath string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filePath)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileResolverMockRecorder) ReadFile(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileResolver)(nil).ReadFile), filePath)
}
