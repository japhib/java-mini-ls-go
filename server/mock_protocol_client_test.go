// Code generated by MockGen. DO NOT EDIT.
// Source: go.lsp.dev/protocol (interfaces: Client)

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "go.lsp.dev/protocol"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ApplyEdit mocks base method.
func (m *MockClient) ApplyEdit(arg0 context.Context, arg1 *protocol.ApplyWorkspaceEditParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyEdit", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyEdit indicates an expected call of ApplyEdit.
func (mr *MockClientMockRecorder) ApplyEdit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyEdit", reflect.TypeOf((*MockClient)(nil).ApplyEdit), arg0, arg1)
}

// Configuration mocks base method.
func (m *MockClient) Configuration(arg0 context.Context, arg1 *protocol.ConfigurationParams) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration", arg0, arg1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configuration indicates an expected call of Configuration.
func (mr *MockClientMockRecorder) Configuration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockClient)(nil).Configuration), arg0, arg1)
}

// LogMessage mocks base method.
func (m *MockClient) LogMessage(arg0 context.Context, arg1 *protocol.LogMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogMessage indicates an expected call of LogMessage.
func (mr *MockClientMockRecorder) LogMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockClient)(nil).LogMessage), arg0, arg1)
}

// Progress mocks base method.
func (m *MockClient) Progress(arg0 context.Context, arg1 *protocol.ProgressParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Progress indicates an expected call of Progress.
func (mr *MockClientMockRecorder) Progress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockClient)(nil).Progress), arg0, arg1)
}

// PublishDiagnostics mocks base method.
func (m *MockClient) PublishDiagnostics(arg0 context.Context, arg1 *protocol.PublishDiagnosticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDiagnostics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDiagnostics indicates an expected call of PublishDiagnostics.
func (mr *MockClientMockRecorder) PublishDiagnostics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDiagnostics", reflect.TypeOf((*MockClient)(nil).PublishDiagnostics), arg0, arg1)
}

// RegisterCapability mocks base method.
func (m *MockClient) RegisterCapability(arg0 context.Context, arg1 *protocol.RegistrationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCapability", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCapability indicates an expected call of RegisterCapability.
func (mr *MockClientMockRecorder) RegisterCapability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCapability", reflect.TypeOf((*MockClient)(nil).RegisterCapability), arg0, arg1)
}

// ShowMessage mocks base method.
func (m *MockClient) ShowMessage(arg0 context.Context, arg1 *protocol.ShowMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowMessage indicates an expected call of ShowMessage.
func (mr *MockClientMockRecorder) ShowMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowMessage", reflect.TypeOf((*MockClient)(nil).ShowMessage), arg0, arg1)
}

// ShowMessageRequest mocks base method.
func (m *MockClient) ShowMessageRequest(arg0 context.Context, arg1 *protocol.ShowMessageRequestParams) (*protocol.MessageActionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowMessageRequest", arg0, arg1)
	ret0, _ := ret[0].(*protocol.MessageActionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowMessageRequest indicates an expected call of ShowMessageRequest.
func (mr *MockClientMockRecorder) ShowMessageRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowMessageRequest", reflect.TypeOf((*MockClient)(nil).ShowMessageRequest), arg0, arg1)
}

// Telemetry mocks base method.
func (m *MockClient) Telemetry(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Telemetry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Telemetry indicates an expected call of Telemetry.
func (mr *MockClientMockRecorder) Telemetry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Telemetry", reflect.TypeOf((*MockClient)(nil).Telemetry), arg0, arg1)
}

// UnregisterCapability mocks base method.
func (m *MockClient) UnregisterCapability(arg0 context.Context, arg1 *protocol.UnregistrationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterCapability", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterCapability indicates an expected call of UnregisterCapability.
func (mr *MockClientMockRecorder) UnregisterCapability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterCapability", reflect.TypeOf((*MockClient)(nil).UnregisterCapability), arg0, arg1)
}

// WorkDoneProgressCreate mocks base method.
func (m *MockClient) WorkDoneProgressCreate(arg0 context.Context, arg1 *protocol.WorkDoneProgressCreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkDoneProgressCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkDoneProgressCreate indicates an expected call of WorkDoneProgressCreate.
func (mr *MockClientMockRecorder) WorkDoneProgressCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkDoneProgressCreate", reflect.TypeOf((*MockClient)(nil).WorkDoneProgressCreate), arg0, arg1)
}

// WorkspaceFolders mocks base method.
func (m *MockClient) WorkspaceFolders(arg0 context.Context) ([]protocol.WorkspaceFolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkspaceFolders", arg0)
	ret0, _ := ret[0].([]protocol.WorkspaceFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkspaceFolders indicates an expected call of WorkspaceFolders.
func (mr *MockClientMockRecorder) WorkspaceFolders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkspaceFolders", reflect.TypeOf((*MockClient)(nil).WorkspaceFolders), arg0)
}