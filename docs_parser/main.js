const { parse, NodeType } = require('node-html-parser');
const axios = require('axios');
const path = require('path');
const fs = require('fs');
const fsPromises = fs.promises;

const baseUrl = 'https://docs.oracle.com/en/java/javase/17/docs/api';
const cacheFolder = 'java_sdk_cache';
const outFilePath = path.join(__dirname, '..', 'parse', 'builtins.go');

function toCachedPath(url) {
  if (!url.startsWith(baseUrl)) {
    throw new Error(`url doesn't start with baseUrl: ${url}`);
  }

  const trimmed = url.substring(baseUrl.length);
  return path.join(__dirname, cacheFolder, trimmed);
}

function stripNewlines(text) {
  return text.replaceAll('\n', '');
}

async function getData(url) {
  const cachedPath = toCachedPath(url);
  if (fs.existsSync(cachedPath)) {
    return (await fsPromises.readFile(cachedPath)).toString();
  }

  const result = await axios.get(url);
  if (result.status !== 200) {
    throw new Error(`Non-200 status code: ${result.status}`)
  }

  // write to cache
  console.log(`Caching contents of ${url}`)
  await fsPromises.mkdir(path.dirname(cachedPath), { recursive: true });
  await fsPromises.writeFile(cachedPath, result.data);

  return result.data;
}

async function genType(url) {
  const htmlStr = await getData(url);
  const root = parse(htmlStr);

  const data = {};

  const title = root.querySelector('h1.title').textContent;
  if (!title.startsWith('Class ')) {
    throw new Error(`title doesn't start with 'Class '! title: ${title}`);
  }
  data.className = title.substring('Class '.length);

  const subtitles = root.querySelectorAll('.header > .sub-title');
  for (const st of subtitles) {
    const label = st.querySelector('span').textContent;
    const content = st.querySelector('a').textContent;

    switch (label.toLowerCase()) {
      case 'package':
        data.package = content;
        break;
      case 'module':
        data.module = content;
        break;
    }
  }

  data.fields = parseThreeColumnTable(root, '.field-summary .summary-table');
  data.methods = parseThreeColumnTable(root, '.method-summary .summary-table');
  data.constructors = parseTwoColumnTable(root, '.constructor-summary .summary-table');

  // console.log(data);
  return data;
}

function parseThreeColumnTable(root, selector) {
  const table = root.querySelector(selector);
  const tableChildren = table.querySelectorAll('div');
  
  const items = [];
  for (let i = 3; i < tableChildren.length - 2; i += 3) {
    items.push({
      modifierAndType: stripNewlines(tableChildren[i].text),
      name: stripNewlines(tableChildren[i+1].text),
      description: stripNewlines(tableChildren[i+2].text),
    })
  }

  return items;
}

function parseTwoColumnTable(root, selector) {
  const table = root.querySelector(selector);
  const tableChildren = table.querySelectorAll('div');
  
  const items = [];
  for (let i = 2; i < tableChildren.length - 1; i += 2) {
    items.push({
      name: stripNewlines(tableChildren[i].text),
      description: stripNewlines(tableChildren[i+1].text),
    })
  }

  return items;
}

function writeTypes(types) {
  const outFile = fs.openSync(outFilePath, 'w');

  fs.writeSync(outFile, `// File generated by docs_parser script. DO NOT EDIT!

package parse

var BuiltinTypes = map[string]*JavaType{`);
  for (const t of types) {
    writeType(outFile, t);
  }
  fs.writeSync(outFile, '\n}\n');

  fs.closeSync(outFile);
}

function writeType(outFile, type) {
  fs.writeSync(outFile, `
    "${type.className}": &JavaType{
        Name: "${type.className}",
        PackageName: "${type.package}",
        Visibility: VisibilityPublic,
        Fields: []*JavaField{`);
  
  for (const field of type.fields) {
    writeField(outFile, field);
  }

  for (const method of type.methods) {
    writeMethod(outFile, method);
  }

  fs.writeSync(outFile, '    },');
}

function writeField(outFile, field) {
  fs.writeSync(outFile, `
            &JavaField{
                Name: "${field.name}",
            },
`)
}

function writeMethod

async function main() {
  const StringType = await genType('https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html')
  writeTypes([StringType]);
}

main().catch(console.error)
